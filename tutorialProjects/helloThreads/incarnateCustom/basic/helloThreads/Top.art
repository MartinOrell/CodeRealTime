capsule Top{
    [[rt::header_preface]]
    `
        #include <iostream>
    `

    [[rt::decl]]
    `
        int _seconds;
    `

    optional part worker1 : Worker;
    optional part worker2 : Worker;
    optional part worker3 : Worker;

    behavior port frame : Frame;
    behavior port tickTimer : Timing;
    behavior port timeoutTimer : Timing;

    statemachine{
        initial->Running;
        state Running{
            entry
            `
                tickTimer.informEvery(RTTimespec(1,0));
                timeoutTimer.informIn(RTTimespec(10,0));
                RTActorId id;

                std::cout << "Incarnate worker 1\n";

                id = frame.incarnateCustom(
                    worker1,
                    RTActorFactory(
                        [this](RTController* rtg_rts, RTActorRef* rtg_ref, int index)
                        {
                            return new Worker(L2, rtg_ref); //L2 defined in .tcjs file
                        }
                    )
                );
                
                if(!id.isValid()){
                    std::cerr << "Failed to incarnate worker 1\n";
                }
                std::cout << "Incarnate worker 2\n";
                
                id = frame.incarnateCustom(
                    worker2,
                    RTActorFactory(
                        [this](RTController* rtg_rts, RTActorRef* rtg_ref, int index)
                        {
                            return new Worker(L3, rtg_ref); //L3 defined in .tcjs file
                        }
                    )
                );
                
                if(!id.isValid()){
                    std::cerr << "Failed to incarnate worker 2\n";
                }

                std::cout << "Incarnate worker 3\n";
                
                id = frame.incarnateCustom(
                    worker3,
                    RTActorFactory(
                        [this](RTController* rtg_rts, RTActorRef* rtg_ref, int index)
                        {
                            return new Worker(L4, rtg_ref); //L4 defined in .tcjs file
                        }
                    )
                );
                
                if(!id.isValid()){
                    std::cerr << "Failed to incarnate worker 3\n";
                }

            `;
            tick: on tickTimer.timeout
            `
                _seconds++;
                std::cout << std::to_string(_seconds) + " seconds has passed\n";
            `;
            end: on timeoutTimer.timeout
            `
                context()->abort();
            `;
        };
    };
};