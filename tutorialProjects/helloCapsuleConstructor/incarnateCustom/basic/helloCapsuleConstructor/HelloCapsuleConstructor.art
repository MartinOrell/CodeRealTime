capsule Top{
    [[rt::header_preface]]
    `
        #include <iostream>
        #include "Greeter.h"
    `

    optional part greeter : Greeter;

    behavior port frame : Frame;

    statemachine{
        state State;
        initial->State
        `
            RTActorId id = frame.incarnateCustom
            (
                greeter,
                RTActorFactory(
                    [this](RTController * rtg_rts, RTActorRef* rtg_ref, int index)
                    {
                        return new Greeter(rtg_rts,rtg_ref, "Donald", "Duck");
                    }
                )
            );
            if(!id.isValid()){
                std::cerr << "Failed to incarnate greeter" << std::endl;
            }
        `;
    };
};

capsule Greeter{

    [[rt::header_preface]]
    `
        #include <iostream>
    `

    [[rt::decl]]
    `
        public:
            Greeter(RTController*, RTActorRef*, std::string, std::string);
        private:
            std::string _firstName;
            std::string _lastName;
    `

    [[rt::impl]]
    `
        Greeter::Greeter(RTController* rtg_rts, RTActorRef* rtg_ref, std::string firstName, std::string lastName)
            :RTActor(rtg_rts, rtg_ref), _firstName(firstName), _lastName(lastName){}
    `

    statemachine{
        state Hello;
        initial->Hello
        `
            std::cout << "Hi, I'm " << _firstName << " " << _lastName << std::endl;
            context()->abort();
        `;
    };
};