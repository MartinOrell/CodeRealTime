capsule HelloTimer{

    [[rt::header_preface]]
    `
        #include <iostream>
    `

    [[rt::decl]]
    `
        public:
            HelloTimer(RTController*, RTActorRef*, RTTimespec updateTime, RTTimespec runDuration);
        private:
            RTTimerId _updateTimerId;
            RTTimespec _updateTime;
            RTTimespec _runDuration;
    `

    [[rt::impl]]
    `
        HelloTimer::HelloTimer(RTController* rtg_rts, RTActorRef* rtg_ref, RTTimespec updateTime, RTTimespec runDuration)
        : RTActor(rtg_rts, rtg_ref)
        , _updateTime(updateTime)
        , _runDuration(runDuration){}
    `

    behavior port repeatTimer : Timing;
    behavior port endTimer : Timing;

    statemachine{
        initial->Running
        `
            std::cout << "Hello World" << std::endl;
            _updateTimerId = repeatTimer.informEvery(_updateTime);
            endTimer.informIn(_runDuration);
        `;
        state Running{
            timeout: on repeatTimer.timeout
            `
                for(int i = 0; i < _updateTimerId.timeouts(); i++){
                    std::cout << "Hello World" << std::endl;
                }
            `;
        };
        Running->End on endTimer.timeout
        `
            std::cout << "Goodbye World" << std::endl;
            repeatTimer.cancelTimer(_updateTimerId);
            context()->abort();
        `;
        state End;
    };
};